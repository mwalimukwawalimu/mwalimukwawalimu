import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

import 'package:image_picker/image_picker.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Ensure you have this import
import 'dart:io';

import 'package:mwalimukwawalimu/models/database.dart';
import 'package:mwalimukwawalimu/models/user_models.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  String uid =
      FirebaseAuth.instance.currentUser!.uid; // Replace with the actual user ID
  String fullName = '';
  String username = '';
  String email = '';
  String phone = '';
  String address = '';
  XFile? image;
  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _fetchUserData();
  }

  Future<void> _fetchUserData() async {
    DatabaseService dbService = DatabaseService(uid: uid);
    CustomUser? user = await dbService.userFromUid();
    if (user != null) {
      setState(() {
        fullName = user.fullName;
        username = user.username;
        email = user.email;
        phone = ''; // Ensure CustomUser has a phone attribute
        address = user.location; // Assuming location is used for the address
      });
    }
  }

  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    setState(() {
      image = pickedFile;
    });
  }

  Future<void> updateUserData(
      String fullName,
      String username,
      String email,
      String bio,
      String location,
      DateTime joinedDate,
      String profilePictureUrl) async {
    final users = FirebaseFirestore.instance
        .collection('users'); // Replace with your Firestore collection
    return await users.doc(uid).set({
      'fullName': fullName,
      'username': username,
      'email': email,
      'bio': bio,
      'location': location,
      'joinedDate': Timestamp.fromDate(joinedDate)
          .toString(), // Store as Firestore timestamp
      'profilePictureUrl': profilePictureUrl,
      'followedTopics': [],
    });
  }

  void _saveProfile() async {
    String? profilePictureUrl;
    if (image != null) {
      // Upload the image to your storage and get the URL
      // Example: profilePictureUrl = await uploadImageToStorage(image!);
    }

    await updateUserData(
      fullName,
      username,
      email,
      "This is my bio", // Replace with your bio field
      address,
      DateTime.now(), // Current date as joined date
      profilePictureUrl ?? '', // Use an empty string if no image uploaded
    );

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Profile updated successfully!')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        centerTitle: true,
        title: const Text(
          'Edit Profile',
          style: TextStyle(
            color: Colors.black,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(height: 20),
            // Profile Photo Placeholder
            GestureDetector(
              onTap: _pickImage,
              child: CircleAvatar(
                radius: 50,
                backgroundColor: Colors.grey[300],
                backgroundImage:
                    image != null ? FileImage(File(image!.path)) : null,
                child: image == null
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.camera_alt, color: Colors.grey[700]),
                          const SizedBox(height: 5),
                          const Text(
                            "Photo Upload +",
                            style: TextStyle(
                              color: Colors.blue,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      )
                    : null,
              ),
            ),
            const SizedBox(height: 30),
            // Full Name Field
            _buildProfileField("Full Name", fullName, (value) {
              setState(() {
                fullName = value;
              });
            }),
            const SizedBox(height: 15),
            // Username Field
            _buildProfileField("Username", username, (value) {
              setState(() {
                username = value;
              });
            }),
            const SizedBox(height: 15),
            // Email Field
            _buildProfileField("Email ID", email, (value) {
              setState(() {
                email = value;
              });
            }),
            const SizedBox(height: 15),
            // Phone Field
            _buildProfileField("Phone", phone, (value) {
              setState(() {
                phone = value;
              });
            }),
            const SizedBox(height: 15),
            // Address Field
            _buildProfileField("Address", address, (value) {
              setState(() {
                address = value;
              });
            }),
            const SizedBox(height: 30),
            // Save Button
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _saveProfile,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.lightBlue[300],
                  padding: const EdgeInsets.symmetric(vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                child: const Text(
                  "Save",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper function to build a profile field
  Widget _buildProfileField(
      String label, String value, ValueChanged<String> onChanged) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Colors.grey,
            fontSize: 14,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 5),
        TextField(
          onChanged: onChanged,
          decoration: InputDecoration(
            hintText: value,
            hintStyle: const TextStyle(fontSize: 16),
            contentPadding:
                const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Colors.grey),
            ),
          ),
        ),
      ],
    );
  }
}

