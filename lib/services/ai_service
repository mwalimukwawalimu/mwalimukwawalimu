import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

// Your AIService class to enhance the question
class AIService {
  Future<String> enhanceQuestion(String question, String topic) async {
    final response = await http.post(
      Uri.parse('https://api.openai.com/v1/completions'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer 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'
      },
      body: jsonEncode({
        "model": "gpt-3.5-turbo-instruct",
        'prompt': 'Enhance this question: $question under topic: $topic',
        'max_tokens': 100
      }),
    );

    if (response.statusCode == 200) {
      var responseBody = jsonDecode(response.body);
      return responseBody['choices'][0]['text'];
    } else {
      throw Exception('Failed to enhance question: ${response.statusCode}');
    }
  }
}

// The main screen to input the question and topic
class QuestionEnhancerScreen extends StatefulWidget {
  const QuestionEnhancerScreen({super.key});

  @override
  _QuestionEnhancerScreenState createState() => _QuestionEnhancerScreenState();
}

class _QuestionEnhancerScreenState extends State<QuestionEnhancerScreen> {
  final TextEditingController _questionController = TextEditingController();
  final TextEditingController _topicController = TextEditingController();
  String? _enhancedQuestion;
  bool _isLoading = false;

  final AIService _aiService = AIService();

  // Method to call the AI service and get enhanced question
  void _enhanceQuestion() async {
    setState(() {
      _isLoading = true;
      _enhancedQuestion = null;
    });

    try {
      final enhanced = await _aiService.enhanceQuestion(
        _questionController.text,
        _topicController.text,
      );
      setState(() {
        _enhancedQuestion = enhanced;
      });
    } catch (e, stacktrace) {
      // Log the error and stacktrace for more information
      print('Error: $e');
      print('Stacktrace: $stacktrace');
      setState(() {
        _enhancedQuestion = 'Error: $e'; // Display exact error
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AI Question Enhancer'),
        backgroundColor: Colors.amber,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _questionController,
              decoration: const InputDecoration(
                labelText: 'Enter your question',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _topicController,
              decoration: const InputDecoration(
                labelText: 'Enter the topic',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isLoading ? null : _enhanceQuestion,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.amber,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isLoading
                  ? const CircularProgressIndicator(color: Colors.white)
                  : const Text(
                      'Enhance Question',
                      style: TextStyle(fontSize: 18),
                    ),
            ),
            const SizedBox(height: 24),
            if (_enhancedQuestion != null)
              Expanded(
                child: SingleChildScrollView(
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      _enhancedQuestion!,
                      style: const TextStyle(fontSize: 18),
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(
    debugShowCheckedModeBanner: false,
    home: QuestionEnhancerScreen(),
  ));
}
