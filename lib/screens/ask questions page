import 'dart:math';
import 'dart:async'; // Import Timer for debounce

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:mwalimukwawalimu/common/constants.dart';
import 'package:mwalimukwawalimu/models/question_model.dart';

import '../services/firebase_service.dart'; // Import the FirebaseService

class AskQuestionPage extends StatefulWidget {
  final Function(String question, String topic)
      onPost; // Callback function to handle question posting

  const AskQuestionPage({super.key, required this.onPost});

  @override
  _AskQuestionPageState createState() => _AskQuestionPageState();
}

class _AskQuestionPageState extends State<AskQuestionPage> {
  final TextEditingController _questionController = TextEditingController();
  String _selectedTopicID = '';
  final String _suggestedQuestion = '';
  List<Map<String, dynamic>> _topics =
      []; // This will hold topics fetched from Firestore
  List<Map<String, dynamic>> _similarQuestions =
      []; // List for similar questions
  bool _isLoadingSimilarQuestions =
      false; // Loading state for fetching similar questions
  Timer? _debounce; // Timer for debounce

  @override
  void initState() {
    super.initState();
    _fetchTopics(); // Fetch topics from Firestore on init

    // Add listener to question input
    _questionController.addListener(_onQuestionChanged);
  }

  @override
  void dispose() {
    _debounce?.cancel(); // Cancel debounce on dispose
    _questionController.dispose(); // Dispose of controller
    super.dispose();
  }

  // Fetch topics from Firestore
  Future<void> _fetchTopics() async {
    try {
      QuerySnapshot snapshot =
          await FirebaseFirestore.instance.collection('topics').get();
      List<Map<String, dynamic>> fetchedTopics = snapshot.docs.map((doc) {
        return {
          'id': doc.id,
          'name': doc['name'],
        };
      }).toList();
      setState(() {
        _topics = fetchedTopics;
      });
    } catch (e) {
      print("Error fetching topics: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to load topics.')),
      );
    }
  }

  // Debounce to avoid querying on every keystroke
  void _onQuestionChanged() {
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    _debounce = Timer(const Duration(milliseconds: 500), () {
      if (_questionController.text.isNotEmpty) {
        _fetchSimilarQuestions(_questionController.text);
      } else {
        setState(() {
          _similarQuestions.clear(); // Clear the list if input is empty
        });
      }
    });
  }

  // Fetch similar questions from Firestore
  Future<void> _fetchSimilarQuestions(String query) async {
    setState(() {
      _isLoadingSimilarQuestions = true;
    });

    try {
      QuerySnapshot snapshot = await FirebaseFirestore.instance
          .collection('questions')
          .where('questionText', isGreaterThanOrEqualTo: query)
          .where('questionText', isLessThanOrEqualTo: '$query\uf8ff')
          .limit(5) // Limit the number of similar questions shown
          .get();

      List<Map<String, dynamic>> fetchedQuestions = snapshot.docs.map((doc) {
        return {
          'id': doc.id,
          'questionText': doc['questionText'],
        };
      }).toList();

      setState(() {
        _similarQuestions = fetchedQuestions;
        _isLoadingSimilarQuestions = false;
      });
    } catch (e) {
      print("Error fetching similar questions: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to load similar questions.')),
      );
      setState(() {
        _isLoadingSimilarQuestions = false;
      });
    }
  }

  void _submitQuestion() async {
    if (_questionController.text.isNotEmpty && _selectedTopicID.isNotEmpty) {
      String uid = FirebaseAuth.instance.currentUser!.uid;
      FirebaseService firebaseService = FirebaseService();
      QuestionModel question = QuestionModel(
        id: Random().nextInt(1000).toString(),
        questionText: _questionController.text,
        authorId: uid, // Replace with actual user ID
        topicId: _selectedTopicID,
        createdAt: DateTime.now(),
      );

      await firebaseService.addQuestion(question, _selectedTopicID);
      Navigator.pop(context); // Return to the previous page
    } else {
      // Show an alert if the input is incomplete
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Please enter a question and select a topic!')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: kSecondaryLight,
        title:
            const Text('Ask Your Question', style: TextStyle(color: kOffWhite)),
      ),
      body: Container(
        decoration: const BoxDecoration(color: kOffWhite),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextField(
                controller: _questionController,
                decoration: InputDecoration(
                  hintText: 'Type your question here...',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                maxLines: 3,
              ),
              const SizedBox(height: 20),

              // Display topics fetched from Firestore
              DropdownButtonFormField<String>(
                value: _selectedTopicID.isNotEmpty ? _selectedTopicID : null,
                hint: const Text('Select a Topic'),
                onChanged: (value) {
                  setState(() {
                    _selectedTopicID = value!;
                  });
                },
                items: _topics.map((topic) {
                  final topicId = topic['id'] ??
                      ''; // Default to an empty string if 'id' is null
                  final topicName = topic['name'] ??
                      ''; // Default to an empty string if 'name' is null
                  return DropdownMenuItem<String>(
                    value: topicId, // Cast to String
                    child: Text(topicName),
                  );
                }).toList(),
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Display AI Suggested Question (if any)
              if (_suggestedQuestion.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(bottom: 20),
                  child: Text(
                    'AI Suggested Question: $_suggestedQuestion',
                    style: TextStyle(
                        fontStyle: FontStyle.italic, color: Colors.grey[700]),
                  ),
                ),

              // Display similar questions while typing
              if (_isLoadingSimilarQuestions) const CircularProgressIndicator(),
              if (_similarQuestions.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 10, bottom: 20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: _similarQuestions.map((question) {
                      return ListTile(
                        title: Text(question['questionText']),
                        onTap: () {
                          // Navigate to the DetailsScreen when a similar question is tapped
                          // Navigator.push(
                          //   context,
                          //   MaterialPageRoute(
                          //     builder: (context) => DetailsScreen(
                          //       questionId: question['questionId'], // Pass question ID
                          //       author: question['author'], // Pass author name
                          //       question: question[
                          //           'questionText'], // Pass question text
                          //     ),
                          //   ),
                          // );
                        },
                      );
                    }).toList(),
                  ),
                ),

              ElevatedButton(
                onPressed: _submitQuestion,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 50),
                  backgroundColor: kPrimaryLight,
                ),
                child: const Text(
                  'Post Question',
                  style: TextStyle(color: Color.fromARGB(255, 255, 255, 255)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
