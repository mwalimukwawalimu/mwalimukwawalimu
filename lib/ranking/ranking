import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:mwalimukwawalimu/models/database.dart';
import 'package:mwalimukwawalimu/models/user_models.dart';

class LeaderboardScreen extends StatefulWidget {
  const LeaderboardScreen({super.key});

  @override
  State<LeaderboardScreen> createState() => _LeaderboardScreenState();
}
class _LeaderboardScreenState extends State<LeaderboardScreen> {
  late Future<List<CustomUser>> _usersFuture;

  @override
  void initState() {
    super.initState();
    _usersFuture = DatabaseService(uid: FirebaseAuth.instance.currentUser!.uid)
        .getAllUsers();
  }
@override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Leaderboard'),
          backgroundColor: Colors.white,
          bottom: const TabBar(
            indicatorColor: Colors.deepPurple,
            labelStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
            tabs: [
              Tab(text: 'Weekly'),
              Tab(text: 'All Time'),
            ],
          ),
        ),
        body: Container(
          color: Colors.white,
          child: Column(
            children: [
              // Progress Card
              Container(
                margin: const EdgeInsets.all(16.0),
                padding: const EdgeInsets.all(16.0),
                decoration: BoxDecoration(
                  color: Colors.deepOrangeAccent,
                  borderRadius: BorderRadius.circular(16.0),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      blurRadius: 6,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: const Text(
                  'ðŸŽ‰ You are doing better than 60% of other contributors!',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),

              // Top 3 Ranking Display
              FutureBuilder<List<CustomUser>>(
                future: _usersFuture,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                    return const Center(child: Text('No users found.'));
                  }

                  return _buildTopThree(snapshot.data!);
                },
              ),

              // TabBar Content
              Expanded(
                child: TabBarView(
                  children: [
                    FutureBuilder<List<CustomUser>>(
                      future: _usersFuture,
                      builder: (context, snapshot) {
                        if (snapshot.connectionState ==
                            ConnectionState.waiting) {
                          return const Center(
                              child: CircularProgressIndicator());
                        } else if (snapshot.hasError) {
                          return Center(
                              child: Text('Error: ${snapshot.error}'));
                        } else if (!snapshot.hasData ||
                            snapshot.data!.isEmpty) {
                          return const Center(child: Text('No users found.'));
                        }

                        // Render the user list here
                        final users = snapshot.data!;
                        return _buildUserList(users);
                      },
                    ),
                    Center(
                      child: Text(
                        'All Time leaderboard content here',
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.8),
                          fontSize: 18,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
// Widget for the top 3 ranked users
  Widget _buildTopThree(List<CustomUser> users) {
    // Ensure we have at least 3 users
    final topThree = users.length >= 3 ? users.sublist(0, 3) : users;

    return Container(
      height: 230,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          // 2nd Place
          _buildRankUser(
            rank: 2,
            name: topThree.length > 1 ? topThree[1].fullName : 'N/A',
            image: topThree.length > 1 ? topThree[1].profilePictureUrl : '',
            score: topThree.length > 1
                ? '${topThree[1].score} points'
                : '0 points',
            backgroundColor: Colors.purpleAccent,
          ),
          // 1st Place (Center and Bigger)
          _buildRankUser(
            rank: 1,
            name: topThree.isNotEmpty ? topThree[0].fullName : 'N/A',
            image: topThree.isNotEmpty ? topThree[0].profilePictureUrl : '',
            score: topThree.isNotEmpty
                ? '${topThree[0].score} points'
                : '0 points',
            crown: true,
            isBig: true,
            backgroundColor: Colors.amberAccent,
          ),
          // 3rd Place
          _buildRankUser(
            rank: 3,
            name: topThree.length > 2 ? topThree[2].fullName : 'N/A',
            image: topThree.length > 2 ? topThree[2].profilePictureUrl : '',
            score: topThree.length > 2
                ? '${topThree[2].score} points'
                : '0 points',
            backgroundColor: Colors.lightBlueAccent,
          ),
        ],
      ),
    );
  }
Widget _buildRankUser({
    required int rank,
    required String name,
    required String image,
    required String score,
    bool crown = false,
    bool isBig = false,
    required Color backgroundColor,
  }) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (crown)
          Icon(
            Icons.emoji_events,
            color: Colors.yellowAccent[700],
            size: isBig ? 40 : 28,
          ),
        CircleAvatar(
          radius: isBig ? 45 : 35,
          backgroundColor: backgroundColor,
          child: CircleAvatar(
            radius: isBig ? 42 : 32,
            backgroundImage: AssetImage(image),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          name,
          style: TextStyle(
            fontSize: isBig ? 18 : 16,
            fontWeight: FontWeight.bold,
            color: Colors.deepPurple,
          ),
        ),
        Text(
          score,
          style: const TextStyle(color: Colors.purple),
        ),
        const SizedBox(height: 12),
        Container(
          width: 40,
          height: 32,
          decoration: BoxDecoration(
            color: Colors.purple[800],
            borderRadius: BorderRadius.circular(12),
          ),
          alignment: Alignment.center,
          child: Text(
            '$rank',
            style: const TextStyle(color: Colors.white, fontSize: 16),
          ),
        ),
      ],
    );
  }

  // Widget for the scrollable user list (for ranks below 3)
  Widget _buildUserList(List<CustomUser> users) {
    final List<CustomUser> otherUsers =
        users.length > 3 ? users.sublist(3, (users.length - 1)) : [];
    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: otherUsers.length,
      itemBuilder: (context, index) {
        return Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          color: Colors.deepPurple[700],
          margin: const EdgeInsets.symmetric(vertical: 10.0),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Colors.deepPurpleAccent,
              child: Text(
                '${index + 4}', // Adjust to reflect correct ranking
                style: const TextStyle(color: Colors.white),
              ),
            ),
            title: Text(
              otherUsers[index].fullName,
              style: const TextStyle(color: Colors.white),
            ),
            subtitle: Text(
              '${otherUsers[index].score} points',
              style: TextStyle(color: Colors.white.withOpacity(0.8)),
            ),
          ),
        );
      },
    );
  }
}

